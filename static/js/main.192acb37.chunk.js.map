{"version":3,"sources":["images/logo.png","data/initialData.ts","styles/styles.ts","styles/compose.ts","components/EditableInput.tsx","components/EditableTextarea.tsx","components/EditableCalendarInput.tsx","components/Document.tsx","components/Page.tsx","components/View.tsx","components/Text.tsx","components/InvoicePage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","initialProductLine","no","description","quantity","rate","initialInvoice","title","companyName","companySubtitle","companyContact","name","companyAddress","companyAddress2","companyCountry","billTo","clientName","clientAddress","clientAddress2","clientPhone","clientCountry","invoiceTitleLabel","invoiceTitle","invoiceDateLabel","invoiceDate","invoiceDueDateLabel","invoiceDueDate","productLineNo","productLineDescription","productLineQuantity","productLineQuantityRate","productLineQuantityAmount","productLines","subTotalLabel","taxLabel","deliveryChargeLabel","paidLabel","totalLabel","currency","notesLabel","termLabel","term","dhakaZipCodes","styles","dark","color","white","backgroundColor","flex","display","flexDirection","flexWrap","paddingRight","width","row","borderBottom","marginTop","marginBottom","padding","paddingBottom","paddingLeft","right","textAlign","bold","fontWeight","fontSize","page","fontFamily","span","compose","classes","css","replace","split","forEach","className","undefined","Object","assign","EditableInput","placeholder","value","onChange","pdfMode","style","type","e","target","EditableTextarea","rows","minRows","EditableCalendarInput","selected","date","dateFormat","Document","children","Page","size","View","props","Text","Font","register","family","fonts","src","InvoicePage","notes","data","useState","invoice","setInvoice","subTotal","setSubTotal","setSaleTax","deliveryCharge","setDeliveryCharge","paidTotal","setPaidTotal","useEffect","zipStr","toLowerCase","filter","a","isNaN","parseInt","join","indexOf","find","zip","toString","Date","valueOf","setDate","getDate","handleChange","newInvoice","handleProductLineChange","index","map","productLine","i","newProductLine","length","includes","n","parseFloat","quantityNumber","rateNumber","match","taxRate","alignItems","height","logo","alt","format","Array","isArray","key","toFixed","calculateAmount","aria-label","onClick","handleRemove","note","App","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.192acb37.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.37df0b6c.png\";","import { ProductLine, Invoice } from './types'\n\nexport const initialProductLine: ProductLine = {\n  no: '1',\n  description: '',\n  quantity: '1',\n  rate: '0.00',\n}\n\n\n\n\nexport const initialInvoice: Invoice = {\n  title: 'INVOICE',\n  companyName: 'Pineapple Exclusive',\n  companySubtitle: '(Keep trust on ourselves, glorify yourself)',\n  companyContact: 'Contact:     01884519601, 01913374682',\n  name: '',\n  companyAddress: 'Address:     217,   MPL ,   Hatirpool ,   Dhaka',\n  companyAddress2: '',\n  companyCountry: 'Bangladesh',\n  billTo: 'Bill To:',\n  clientName: '',\n  clientAddress: '',\n  clientAddress2: '',\n  clientPhone: '',\n  clientCountry: 'Bangladesh',\n  invoiceTitleLabel: 'Invoice#',\n  invoiceTitle: '',\n  invoiceDateLabel: 'Invoice Date',\n  invoiceDate: '',\n  invoiceDueDateLabel: 'Due Date',\n  invoiceDueDate: '',\n  productLineNo: 'No',\n  productLineDescription: 'Product Name',\n  productLineQuantity: 'Qty',\n  productLineQuantityRate: 'Rate',\n  productLineQuantityAmount: 'Amount',\n  productLines: [\n    // {\n    //   description: 'Brochure Design',\n    //   quantity: '2',\n    //   rate: '100.00',\n    // },\n    { ...initialProductLine },\n    // { ...initialProductLine },\n  ],\n  subTotalLabel: 'Sub Total',\n  taxLabel: 'Sale Tax (10%)',\n  deliveryChargeLabel: 'Delivery Charge',\n  paidLabel: 'Paid',\n  totalLabel: 'TOTAL DUE',\n  currency: '৳',\n  notesLabel: 'Payment and Delivery procedures',\n  termLabel: 'Terms & Conditions',\n  term: 'Please make the payment by the due date.',\n}\n\nexport const dhakaZipCodes = [\n  1360,\n  1361,\n  1362,\n  1206,\n  1350,\n  1351,\n  1209,\n  1212,\n  1213,\n  1232,\n  1330,\n  1331,\n  1332,\n  1310,\n  1311,\n  1312,\n  1313,\n  1219,\n  1229,\n  1211,\n  1218,\n  1207,\n  1225,\n  1222,\n  1223,\n  1320,\n  1321,\n  1322,\n  1323,\n  1324,\n  1325,\n  1205,\n  1000,\n  1217,\n  1214,\n  1340,\n  1341,\n  1342,\n  1343,\n  1344,\n  1345,\n  1346,\n  1347,\n  1348,\n  1349,\n  1100,\n  1203,\n  1204,\n  1215,\n  1208,\n  1231,\n  1200\n];","import { CSSClasses } from '../data/types'\n\nconst colorDark = '#222'\nconst colorDark2 = '#666'\nconst colorGray = '#e3e3e3'\nconst colorWhite = '#fff'\n\nconst styles: CSSClasses = {\n  dark: {\n    color: colorDark,\n  },\n\n  white: {\n    color: colorWhite,\n  },\n\n  'bg-dark': {\n    backgroundColor: colorDark2,\n  },\n\n  'bg-gray': {\n    backgroundColor: colorGray,\n  },\n\n  flex: {\n    display: 'flex',\n    flexDirection: 'row',\n    flexWrap: 'nowrap',\n  },\n\n  'w-auto': {\n    flex: 1,\n    paddingRight: '8px',\n  },\n\n  'ml-30': {\n    flex: 1,\n  },\n\n  'w-100': {\n    width: '100%',\n  },\n\n  'w-93': {\n    width: '93%',\n  },\n\n  'w-50': {\n    width: '50%',\n  },\n\n  'w-55': {\n    width: '55%',\n  },\n\n  'w-45': {\n    width: '45%',\n  },\n\n  'w-60': {\n    width: '60%',\n  },\n\n  'w-40': {\n    width: '40%',\n  },\n\n  'w-48': {\n    width: '48%',\n  },\n\n  'w-17': {\n    width: '17%',\n  },\n\n  'w-18': {\n    width: '18%',\n  },\n\n  'w-9': {\n    width: '9%',\n  },\n\n  'w-8': {\n    width: '8%',\n  },\n\n  row: {\n    borderBottom: `1px solid ${colorGray}`,\n  },\n\n  'mt-40': {\n    marginTop: '40px',\n  },\n\n  'mt-30': {\n    marginTop: '30px',\n  },\n\n  'mt-20': {\n    marginTop: '20px',\n  },\n\n  'mt-10': {\n    marginTop: '10px',\n  },\n\n  'mb-5': {\n    marginBottom: '5px',\n  },\n\n  'p-4-8': {\n    padding: '4px 8px',\n  },\n\n  'p-5': {\n    padding: '5px',\n  },\n\n  'pb-10': {\n    paddingBottom: '10px',\n  },\n\n  'pl-10': {\n    paddingLeft: '10px !important',\n  },\n\n  right: {\n    textAlign: 'right',\n  },\n\n  bold: {\n    fontWeight: 'bold',\n  },\n\n  'fs-20': {\n    fontSize: '20px',\n  },\n\n  'fs-45': {\n    fontSize: '45px',\n  },\n\n  page: {\n    fontFamily: 'Nunito',\n    fontSize: '13px',\n    color: '#555',\n    padding: '40px 35px',\n  },\n\n  span: {\n    padding: '4px 12px 4px 0',\n  },\n}\n\nexport default styles\n","import ReactPDF from '@react-pdf/renderer'\nimport styles from './styles'\n\nconst compose = (classes: string): ReactPDF.Styles => {\n  const css: ReactPDF.Styles = {}\n\n  const classesArray: string[] = classes.replace(/\\s+/g, ' ').split(' ')\n\n  classesArray.forEach((className) => {\n    if (typeof styles[className] !== undefined) {\n      Object.assign(css, styles[className])\n    }\n  })\n\n  return css\n}\n\nexport default compose\n","import React, { FC } from 'react'\nimport { Text } from '@react-pdf/renderer'\nimport compose from '../styles/compose'\n\ninterface Props {\n  className?: string\n  placeholder?: string\n  value?: string\n  onChange?: (value: string) => void\n  pdfMode?: boolean\n}\n\nconst EditableInput: FC<Props> = ({ className, placeholder, value, onChange, pdfMode }) => {\n  return (\n    <>\n      {pdfMode ? (\n        <Text style={compose('span ' + (className ? className : ''))}>{value}</Text>\n      ) : (\n        <input\n          type=\"text\"\n          className={'input ' + (className ? className : '')}\n          placeholder={placeholder || ''}\n          value={value || ''}\n          onChange={onChange ? (e) => onChange(e.target.value) : undefined}\n        />\n      )}\n    </>\n  )\n}\n\nexport default EditableInput\n","import React, { FC } from 'react'\nimport TextareaAutosize from 'react-textarea-autosize'\nimport { Text } from '@react-pdf/renderer'\nimport compose from '../styles/compose'\n\ninterface Props {\n  className?: string\n  placeholder?: string\n  value?: string\n  onChange?: (value: string) => void\n  pdfMode?: boolean\n  rows?: number\n}\n\nconst EditableTextarea: FC<Props> = ({\n  className,\n  placeholder,\n  value,\n  onChange,\n  pdfMode,\n  rows,\n}) => {\n  return (\n    <>\n      {pdfMode ? (\n        <Text style={compose('span ' + (className ? className : ''))}>{value}</Text>\n      ) : (\n        <TextareaAutosize\n          minRows={rows || 1}\n          className={'input ' + (className ? className : '')}\n          placeholder={placeholder || ''}\n          value={value || ''}\n          onChange={onChange ? (e) => onChange(e.target.value) : undefined}\n        />\n      )}\n    </>\n  )\n}\n\nexport default EditableTextarea\n","import React, { FC } from 'react'\nimport { Text } from '@react-pdf/renderer'\nimport DatePicker from 'react-datepicker'\nimport 'react-datepicker/dist/react-datepicker.css'\nimport compose from '../styles/compose'\n\ninterface Props {\n  className?: string\n  value?: string\n  selected?: Date\n  onChange?: (date: Date | [Date, Date] | null) => void\n  pdfMode?: boolean\n}\n\nconst EditableCalendarInput: FC<Props> = ({ className, value, selected, onChange, pdfMode }) => {\n  return (\n    <>\n      {pdfMode ? (\n        <Text style={compose('span ' + (className ? className : ''))}>{value}</Text>\n      ) : (\n        <DatePicker\n          className={'input ' + (className ? className : '')}\n          selected={selected}\n          onChange={onChange ? (date) => onChange(date) : (date) => null}\n          dateFormat=\"MMM dd, yyyy\"\n        />\n      )}\n    </>\n  )\n}\n\nexport default EditableCalendarInput\n","import React, { FC } from 'react'\nimport { Document as PdfDocument } from '@react-pdf/renderer'\n\ninterface Props {\n  pdfMode?: boolean\n}\n\nconst Document: FC<Props> = ({ pdfMode, children }) => {\n  return <>{pdfMode ? <PdfDocument>{children}</PdfDocument> : <>{children}</>}</>\n}\n\nexport default Document\n","import React, { FC } from 'react'\nimport { Page as PdfPage } from '@react-pdf/renderer'\nimport compose from '../styles/compose'\n\ninterface Props {\n  className?: string\n  pdfMode?: boolean\n}\n\nconst Page: FC<Props> = ({ className, pdfMode, children }) => {\n  return (\n    <>\n      {pdfMode ? (\n        <PdfPage size=\"A4\" style={compose('page ' + (className ? className : ''))}>\n          {children}\n        </PdfPage>\n      ) : (\n        <div className={'page ' + (className ? className : '')}>{children}</div>\n      )}\n    </>\n  )\n}\n\nexport default Page\n","import React, { FC } from \"react\";\nimport { View as PdfView } from \"@react-pdf/renderer\";\nimport compose from \"../styles/compose\";\n\ninterface Props {\n  className?: string;\n  pdfMode?: boolean;\n}\n\nconst View: FC<Props> = (props) => {\n  const { className, pdfMode, children } = props;\n  return (\n    <>\n      {pdfMode ? (\n        <PdfView\n          style={compose(\"view \" + (className ? className : \"\"))}\n        >\n          {children}\n        </PdfView>\n      ) : (\n        <div className={\"view \" + (className ? className : \"\")}>{children}</div>\n      )}\n    </>\n  );\n};\n\nexport default View;\n","import React, { FC } from \"react\";\nimport { Text as PdfText } from \"@react-pdf/renderer\";\nimport compose from \"../styles/compose\";\n\ninterface Props {\n  className?: string;\n  pdfMode?: boolean;\n  children?: string | number;\n}\n\nconst Text: FC<Props> = ({ className, pdfMode, children }) => {\n  return (\n    <>\n      {pdfMode ? (\n        <PdfText style={compose(\"span \" + (className ? className : \"\"))}>\n          {children}\n        </PdfText>\n      ) : (\n        <span className={\"span \" + (className ? className : \"\")}>\n          {children}\n        </span>\n      )}\n    </>\n  );\n};\n\nexport default Text;\n","import React, { FC, useState, useEffect } from \"react\";\nimport { Invoice, ProductLine } from \"../data/types\";\nimport {\n  initialInvoice,\n  initialProductLine,\n  dhakaZipCodes,\n} from \"../data/initialData\";\nimport EditableInput from \"./EditableInput\";\n// import EditableSelect from \"./EditableSelect\";\nimport EditableTextarea from \"./EditableTextarea\";\nimport EditableCalendarInput from \"./EditableCalendarInput\";\n// import countryList from \"../data/countryList\";\nimport Document from \"./Document\";\nimport Page from \"./Page\";\nimport View from \"./View\";\nimport Text from \"./Text\";\nimport { Font } from \"@react-pdf/renderer\";\n// import Download from \"./DownloadPDF\";\nimport format from \"date-fns/format\";\nimport logo from \"../images/logo.png\";\n\nFont.register({\n  family: \"Nunito\",\n  fonts: [\n    { src: \"https://fonts.gstatic.com/s/nunito/v12/XRXV3I6Li01BKofINeaE.ttf\" },\n    {\n      src:\n        \"https://fonts.gstatic.com/s/nunito/v12/XRXW3I6Li01BKofA6sKUYevN.ttf\",\n      fontWeight: 600,\n    },\n  ],\n});\n\ninterface Props {\n  data?: Invoice;\n  pdfMode?: boolean;\n}\n\nconst InvoicePage: FC<Props> = ({ data, pdfMode }) => {\n  const [invoice, setInvoice] = useState<Invoice>(\n    data ? { ...data } : { ...initialInvoice }\n  );\n  const [subTotal, setSubTotal] = useState<number>();\n  const [saleTax, setSaleTax] = useState<number>();\n  const [deliveryCharge, setDeliveryCharge] = useState<string>();\n  const [paidTotal, setPaidTotal] = useState<string>();\n  // const [isDhaka, setIsDhaka] = useState<boolean>(false);\n\n  let notes: string[];\n  notes = [\n    \"Delivery charge 70 taka inside Dhaka, 100 taka outside Dhaka.\",\n    \"Without cash on delivery place you have to pay advance through bKash/Rocket.\",\n    \"If you return with an unnecessary reason we will ban you for future shopping from us\",\n    \"You will get 15 days replacement warranty for gadget item.\",\n  ];\n\n  let indexOfNote;\n\n  // console.log(indexOfNote, saleTax);\n\n  useEffect(() => {\n    const zipStr = invoice.clientAddress2\n      .toLowerCase()\n      .split(\"\")\n      .filter((a) => isNaN(parseInt(a)) === false)\n      .join(\"\");\n\n    if (\n      invoice.clientAddress2.toLowerCase().indexOf(\"dhaka\") !== -1 ||\n      invoice.clientAddress.toLowerCase().indexOf(\"dhaka\") !== -1 ||\n      dhakaZipCodes?.find((zip) => zipStr.indexOf(zip.toString()) !== -1) !==\n        undefined\n    ) {\n      // setIsDhaka(true);\n      setDeliveryCharge(\"70.00\");\n      // console.log(\"Inside Dhaka\");\n    } else {\n      // setIsDhaka(false);\n      setDeliveryCharge(\"100.00\");\n      // console.log(\"Outside Dhaka\");\n    }\n  }, [invoice.clientAddress2, invoice.clientAddress]);\n\n  const dateFormat = \"MMM dd, yyyy\";\n  const invoiceDate =\n    invoice.invoiceDate !== \"\" ? new Date(invoice.invoiceDate) : new Date();\n  const invoiceDueDate =\n    invoice.invoiceDueDate !== \"\"\n      ? new Date(invoice.invoiceDueDate)\n      : new Date(invoiceDate.valueOf());\n\n  if (invoice.invoiceDueDate === \"\") {\n    invoiceDueDate.setDate(invoiceDueDate.getDate() + 30);\n  }\n\n  const handleChange = (name: keyof Invoice, value: string) => {\n    if (name !== \"productLines\") {\n      const newInvoice = { ...invoice };\n      newInvoice[name] = value;\n\n      setInvoice(newInvoice);\n    }\n  };\n\n  const handleProductLineChange = (\n    index: number,\n    name: keyof ProductLine,\n    value: string\n  ) => {\n    const productLines = invoice.productLines.map((productLine, i) => {\n      if (i === index) {\n        const newProductLine = { ...productLine };\n\n        if (name === \"description\") {\n          newProductLine[name] = value;\n        } else {\n          if (\n            value[value.length - 1] === \".\" ||\n            (value[value.length - 1] === \"0\" && value.includes(\".\"))\n          ) {\n            newProductLine[name] = value;\n          } else {\n            const n = parseFloat(value);\n\n            newProductLine[name] = (n ? n : 0).toString();\n          }\n        }\n\n        return newProductLine;\n      }\n\n      return { ...productLine };\n    });\n\n    setInvoice({ ...invoice, productLines });\n  };\n\n  const handleRemove = (i: number) => {\n    const productLines = invoice.productLines.filter(\n      (productLine, index) => index !== i\n    );\n\n    setInvoice({ ...invoice, productLines });\n  };\n\n  const handleAdd = () => {\n    const productLines = [...invoice.productLines, { ...initialProductLine }];\n\n    setInvoice({ ...invoice, productLines });\n  };\n\n  const calculateAmount = (quantity: string, rate: string) => {\n    const quantityNumber = parseFloat(quantity);\n    const rateNumber = parseFloat(rate);\n    const amount =\n      quantityNumber && rateNumber ? quantityNumber * rateNumber : 0;\n\n    return amount.toFixed(2);\n  };\n\n  useEffect(() => {\n    let subTotal = 0;\n\n    invoice.productLines.forEach((productLine) => {\n      const quantityNumber = parseFloat(productLine.quantity);\n      const rateNumber = parseFloat(productLine.rate);\n      const amount =\n        quantityNumber && rateNumber ? quantityNumber * rateNumber : 0;\n\n      subTotal += amount;\n    });\n\n    setSubTotal(subTotal);\n  }, [invoice.productLines]);\n\n  useEffect(() => {\n    const match = invoice.taxLabel.match(/(\\d+)%/);\n    const taxRate = match ? parseFloat(match[1]) : 0;\n    const saleTax = subTotal ? (subTotal * taxRate) / 100 : 0;\n\n    setSaleTax(saleTax);\n    setPaidTotal(\"0.00\");\n    // setDeliveryCharge(\"0.00\");\n  }, [subTotal, invoice.taxLabel]);\n\n  return (\n    <Document pdfMode={pdfMode}>\n      <Page className=\"invoice-wrapper\" pdfMode={pdfMode}>\n        {/* {!pdfMode && <Download data={invoice} />} */}\n\n        {/* header start */}\n        <View className=\"flex\" pdfMode={pdfMode}>\n          <View pdfMode={pdfMode}>\n            <div\n              style={{\n                // marginRight: \"2rem\",\n                display: \"flex\",\n                alignItems: \"center\",\n                height: \"100%\",\n              }}\n              // pdfMode={pdfMode}\n            >\n              <img\n                src={logo}\n                alt=\"logo\"\n                width=\"100px\"\n                // pdfMode={pdfMode}\n              />\n            </div>\n          </View>\n          <View pdfMode={pdfMode}>\n            <EditableInput\n              className=\"fs-40 bold center space-remove\"\n              placeholder=\"Your Company\"\n              value={invoice.companyName}\n              onChange={(value) => handleChange(\"companyName\", value)}\n              pdfMode={pdfMode}\n            />\n            <EditableInput\n              className=\" center space-remove\"\n              placeholder=\"Company Subtitle\"\n              value={invoice.companySubtitle}\n              onChange={(value) => handleChange(\"companySubtitle\", value)}\n              pdfMode={pdfMode}\n            />\n            <EditableInput\n              className=\"fs-15 bold center space-remove\"\n              placeholder=\"Company Contact\"\n              value={invoice.companyContact}\n              onChange={(value) => handleChange(\"companyContact\", value)}\n              pdfMode={pdfMode}\n            />\n            <EditableInput\n              className=\"fs-15 bold center space-remove\"\n              placeholder=\"Company Address\"\n              value={invoice.companyAddress}\n              onChange={(value) => handleChange(\"companyAddress\", value)}\n              pdfMode={pdfMode}\n            />\n          </View>\n        </View>\n        {/* header end */}\n\n        {/* date pick start */}\n        {/* <View className=\"flex end mt-10\" pdfMode={pdfMode}>\n          <View className=\"flex  mb-5\" pdfMode={pdfMode}>\n            <View className=\"w-40\" pdfMode={pdfMode}></View>\n            <View className=\"w-18\" pdfMode={pdfMode}>\n              <EditableInput\n                className=\"bold\"\n                value={invoice.invoiceDateLabel}\n                onChange={(value) => handleChange(\"invoiceDateLabel\", value)}\n                pdfMode={pdfMode}\n              />\n            </View>\n            <View className=\"w-40\" pdfMode={pdfMode}>\n              <EditableCalendarInput\n                value={format(invoiceDate, dateFormat)}\n                selected={invoiceDate}\n                onChange={(date) =>\n                  handleChange(\n                    \"invoiceDate\",\n                    date && !Array.isArray(date) ? format(date, dateFormat) : \"\"\n                  )\n                }\n                pdfMode={pdfMode}\n              />\n            </View>\n          </View>\n        </View> */}\n        {/* date pick end */}\n\n        {/* <View className=\"flex\" pdfMode={pdfMode}>\n          <View className=\"w-50\" pdfMode={pdfMode}>\n            <EditableInput\n              className=\"fs-20 bold\"\n              placeholder=\"Your Company\"\n              value={invoice.companyName}\n              onChange={(value) => handleChange(\"companyName\", value)}\n              pdfMode={pdfMode}\n            />\n            <EditableInput\n              placeholder=\"Your Name\"\n              value={invoice.name}\n              onChange={(value) => handleChange(\"name\", value)}\n              pdfMode={pdfMode}\n            />\n            <EditableInput\n              placeholder=\"Company's Address\"\n              value={invoice.companyAddress}\n              onChange={(value) => handleChange(\"companyAddress\", value)}\n              pdfMode={pdfMode}\n            />\n            <EditableInput\n              placeholder=\"City, State Zip\"\n              value={invoice.companyAddress2}\n              onChange={(value) => handleChange(\"companyAddress2\", value)}\n              pdfMode={pdfMode}\n            />\n            <EditableSelect\n              options={countryList}\n              value={invoice.companyCountry}\n              onChange={(value) => handleChange(\"companyCountry\", value)}\n              pdfMode={pdfMode}\n            />\n          </View>\n          <View className=\"w-50\" pdfMode={pdfMode}>\n            <EditableInput\n              className=\"fs-45 right bold\"\n              placeholder=\"Invoice\"\n              value={invoice.title}\n              onChange={(value) => handleChange(\"title\", value)}\n              pdfMode={pdfMode}\n            />\n          </View>\n        </View> */}\n\n        {/* client start */}\n        <View className=\"flex mt-40\" pdfMode={pdfMode}>\n          <View className=\"w-55\" pdfMode={pdfMode}>\n            <EditableInput\n              className=\"bold dark mb-5\"\n              value={invoice.billTo}\n              onChange={(value) => handleChange(\"billTo\", value)}\n              pdfMode={pdfMode}\n            />\n            <EditableInput\n              placeholder=\"Client's Name\"\n              value={invoice.clientName}\n              onChange={(value) => handleChange(\"clientName\", value)}\n              pdfMode={pdfMode}\n            />\n            <EditableInput\n              placeholder=\"Client's Contact\"\n              value={invoice.clientPhone}\n              onChange={(value) => handleChange(\"clientPhone\", value)}\n              pdfMode={pdfMode}\n            />\n            <EditableInput\n              placeholder=\"Client's Address\"\n              value={invoice.clientAddress}\n              onChange={(value) => handleChange(\"clientAddress\", value)}\n              pdfMode={pdfMode}\n            />\n            <EditableInput\n              placeholder=\"City, State Zip\"\n              value={invoice.clientAddress2}\n              onChange={(value) => handleChange(\"clientAddress2\", value)}\n              pdfMode={pdfMode}\n            />\n\n            {/* <EditableSelect\n              options={countryList}\n              value={invoice.clientCountry}\n              onChange={(value) => handleChange(\"clientCountry\", value)}\n              pdfMode={pdfMode}\n            /> */}\n          </View>\n          <View className=\"w-45\" pdfMode={pdfMode}>\n            <View className=\"flex mb-5 mt-40\" pdfMode={pdfMode}>\n              <View className=\"w-40\" pdfMode={pdfMode}>\n                <EditableInput\n                  className=\"bold\"\n                  value={invoice.invoiceTitleLabel}\n                  onChange={(value) => handleChange(\"invoiceTitleLabel\", value)}\n                  pdfMode={pdfMode}\n                />\n              </View>\n              <View className=\"w-60\" pdfMode={pdfMode}>\n                <EditableInput\n                  placeholder=\"INV-12\"\n                  value={invoice.invoiceTitle}\n                  onChange={(value) => handleChange(\"invoiceTitle\", value)}\n                  pdfMode={pdfMode}\n                />\n              </View>\n            </View>\n            <View className=\"flex mb-5\" pdfMode={pdfMode}>\n              <View className=\"w-40\" pdfMode={pdfMode}>\n                <EditableInput\n                  className=\"bold\"\n                  value={invoice.invoiceDateLabel}\n                  onChange={(value) => handleChange(\"invoiceDateLabel\", value)}\n                  pdfMode={pdfMode}\n                />\n              </View>\n              <View className=\"w-60\" pdfMode={pdfMode}>\n                <EditableCalendarInput\n                  value={format(invoiceDate, dateFormat)}\n                  selected={invoiceDate}\n                  onChange={(date) =>\n                    handleChange(\n                      \"invoiceDate\",\n                      date && !Array.isArray(date)\n                        ? format(date, dateFormat)\n                        : \"\"\n                    )\n                  }\n                  pdfMode={pdfMode}\n                />\n              </View>\n            </View>\n            {/* <View className=\"flex mb-5\" pdfMode={pdfMode}>\n              <View className=\"w-40\" pdfMode={pdfMode}>\n                <EditableInput\n                  className=\"bold\"\n                  value={invoice.invoiceDueDateLabel}\n                  onChange={(value) =>\n                    handleChange(\"invoiceDueDateLabel\", value)\n                  }\n                  pdfMode={pdfMode}\n                />\n              </View>\n              <View className=\"w-60\" pdfMode={pdfMode}>\n                <EditableCalendarInput\n                  value={format(invoiceDueDate, dateFormat)}\n                  selected={invoiceDueDate}\n                  onChange={(date) =>\n                    handleChange(\n                      \"invoiceDueDate\",\n                      date && !Array.isArray(date)\n                        ? format(date, dateFormat)\n                        : \"\"\n                    )\n                  }\n                  pdfMode={pdfMode}\n                />\n              </View>\n            </View> */}\n          </View>\n        </View>\n        {/* client end */}\n        {/* \n        <View className=\"flex mt-40\" pdfMode={pdfMode}>\n          <View className=\"w-55\" pdfMode={pdfMode}>\n            <EditableInput\n              className=\"bold dark mb-5\"\n              value={invoice.billTo}\n              onChange={(value) => handleChange(\"billTo\", value)}\n              pdfMode={pdfMode}\n            />\n            <EditableInput\n              placeholder=\"Your Client's Name\"\n              value={invoice.clientName}\n              onChange={(value) => handleChange(\"clientName\", value)}\n              pdfMode={pdfMode}\n            />\n            <EditableInput\n              placeholder=\"Client's Address\"\n              value={invoice.clientAddress}\n              onChange={(value) => handleChange(\"clientAddress\", value)}\n              pdfMode={pdfMode}\n            />\n            <EditableInput\n              placeholder=\"City, State Zip\"\n              value={invoice.clientAddress2}\n              onChange={(value) => handleChange(\"clientAddress2\", value)}\n              pdfMode={pdfMode}\n            />\n            <EditableSelect\n              options={countryList}\n              value={invoice.clientCountry}\n              onChange={(value) => handleChange(\"clientCountry\", value)}\n              pdfMode={pdfMode}\n            />\n          </View>\n          <View className=\"w-45\" pdfMode={pdfMode}>\n            <View className=\"flex mb-5\" pdfMode={pdfMode}>\n              <View className=\"w-40\" pdfMode={pdfMode}>\n                <EditableInput\n                  className=\"bold\"\n                  value={invoice.invoiceTitleLabel}\n                  onChange={(value) => handleChange(\"invoiceTitleLabel\", value)}\n                  pdfMode={pdfMode}\n                />\n              </View>\n              <View className=\"w-60\" pdfMode={pdfMode}>\n                <EditableInput\n                  placeholder=\"INV-12\"\n                  value={invoice.invoiceTitle}\n                  onChange={(value) => handleChange(\"invoiceTitle\", value)}\n                  pdfMode={pdfMode}\n                />\n              </View>\n            </View>\n            <View className=\"flex mb-5\" pdfMode={pdfMode}>\n              <View className=\"w-40\" pdfMode={pdfMode}>\n                <EditableInput\n                  className=\"bold\"\n                  value={invoice.invoiceDateLabel}\n                  onChange={(value) => handleChange(\"invoiceDateLabel\", value)}\n                  pdfMode={pdfMode}\n                />\n              </View>\n              <View className=\"w-60\" pdfMode={pdfMode}>\n                <EditableCalendarInput\n                  value={format(invoiceDate, dateFormat)}\n                  selected={invoiceDate}\n                  onChange={(date) =>\n                    handleChange(\n                      \"invoiceDate\",\n                      date && !Array.isArray(date)\n                        ? format(date, dateFormat)\n                        : \"\"\n                    )\n                  }\n                  pdfMode={pdfMode}\n                />\n              </View>\n            </View>\n            <View className=\"flex mb-5\" pdfMode={pdfMode}>\n              <View className=\"w-40\" pdfMode={pdfMode}>\n                <EditableInput\n                  className=\"bold\"\n                  value={invoice.invoiceDueDateLabel}\n                  onChange={(value) =>\n                    handleChange(\"invoiceDueDateLabel\", value)\n                  }\n                  pdfMode={pdfMode}\n                />\n              </View>\n              <View className=\"w-60\" pdfMode={pdfMode}>\n                <EditableCalendarInput\n                  value={format(invoiceDueDate, dateFormat)}\n                  selected={invoiceDueDate}\n                  onChange={(date) =>\n                    handleChange(\n                      \"invoiceDueDate\",\n                      date && !Array.isArray(date)\n                        ? format(date, dateFormat)\n                        : \"\"\n                    )\n                  }\n                  pdfMode={pdfMode}\n                />\n              </View>\n            </View>\n          </View>\n        </View> */}\n\n        <View className=\"mt-30 bg-dark flex\" pdfMode={pdfMode}>\n          <View className=\"w-8 p-4-8\" pdfMode={pdfMode}>\n            <EditableInput\n              className=\"white bold right\"\n              value={invoice.productLineNo}\n              onChange={(value) => handleChange(\"productLineNo\", value)}\n              pdfMode={pdfMode}\n            />\n          </View>\n          <View className=\"w-48 p-4-8\" pdfMode={pdfMode}>\n            <EditableInput\n              className=\"white bold\"\n              value={invoice.productLineDescription}\n              onChange={(value) =>\n                handleChange(\"productLineDescription\", value)\n              }\n              pdfMode={pdfMode}\n            />\n          </View>\n          <View className=\"w-9 p-4-8\" pdfMode={pdfMode}>\n            <EditableInput\n              className=\"white bold right\"\n              value={invoice.productLineQuantity}\n              onChange={(value) => handleChange(\"productLineQuantity\", value)}\n              pdfMode={pdfMode}\n            />\n          </View>\n          <View className=\"w-17 p-4-8\" pdfMode={pdfMode}>\n            <EditableInput\n              className=\"white bold right\"\n              value={invoice.productLineQuantityRate}\n              onChange={(value) =>\n                handleChange(\"productLineQuantityRate\", value)\n              }\n              pdfMode={pdfMode}\n            />\n          </View>\n          <View className=\"w-18 p-4-8\" pdfMode={pdfMode}>\n            <EditableInput\n              className=\"white bold right\"\n              value={invoice.productLineQuantityAmount}\n              onChange={(value) =>\n                handleChange(\"productLineQuantityAmount\", value)\n              }\n              pdfMode={pdfMode}\n            />\n          </View>\n        </View>\n\n        {invoice.productLines.map((productLine, i) => {\n          return pdfMode && productLine.description === \"\" ? (\n            <Text key={i}></Text>\n          ) : (\n            <View key={i} className=\"row flex\" pdfMode={pdfMode}>\n              <View className=\"w-8 p-4-8 pb-10\" pdfMode={pdfMode}>\n                <EditableInput\n                  className=\"dark right\"\n                  value={`${i + parseInt(productLine.no)}`}\n                  onChange={(value) => handleProductLineChange(i, \"no\", value)}\n                  pdfMode={pdfMode}\n                />\n              </View>\n              <View className=\"w-48 p-4-8 pb-10\" pdfMode={pdfMode}>\n                <EditableTextarea\n                  className=\"dark\"\n                  rows={2}\n                  placeholder=\"Enter item name/description\"\n                  value={productLine.description}\n                  onChange={(value) =>\n                    handleProductLineChange(i, \"description\", value)\n                  }\n                  pdfMode={pdfMode}\n                />\n              </View>\n              <View className=\"w-9 p-4-8 pb-10\" pdfMode={pdfMode}>\n                <EditableInput\n                  className=\"dark right\"\n                  value={productLine.quantity}\n                  onChange={(value) =>\n                    handleProductLineChange(i, \"quantity\", value)\n                  }\n                  pdfMode={pdfMode}\n                />\n              </View>\n              <View className=\"w-17 p-4-8 pb-10\" pdfMode={pdfMode}>\n                <EditableInput\n                  className=\"dark right\"\n                  value={productLine.rate}\n                  onChange={(value) =>\n                    handleProductLineChange(i, \"rate\", value)\n                  }\n                  pdfMode={pdfMode}\n                />\n              </View>\n              <View className=\"w-18 p-4-8 pb-10\" pdfMode={pdfMode}>\n                <Text className=\"dark right\" pdfMode={pdfMode}>\n                  {calculateAmount(productLine.quantity, productLine.rate)}\n                </Text>\n              </View>\n              {!pdfMode && (\n                <button\n                  className=\"link row__remove\"\n                  aria-label=\"Remove Row\"\n                  title=\"Remove Row\"\n                  onClick={() => handleRemove(i)}\n                >\n                  <span className=\"icon icon-remove bg-red\"></span>\n                </button>\n              )}\n            </View>\n          );\n        })}\n\n        <View className=\"flex\" pdfMode={pdfMode}>\n          <View className=\"w-50 mt-10\" pdfMode={pdfMode}>\n            {!pdfMode && (\n              <button className=\"link\" onClick={handleAdd}>\n                <span className=\"icon icon-add bg-green mr-10\"></span>\n                Add Line Item\n              </button>\n            )}\n          </View>\n          <View className=\"w-50 mt-20\" pdfMode={pdfMode}>\n            <View className=\"flex\" pdfMode={pdfMode}>\n              <View className=\"w-50 p-5\" pdfMode={pdfMode}>\n                <EditableInput\n                  value={invoice.subTotalLabel}\n                  onChange={(value) => handleChange(\"subTotalLabel\", value)}\n                  pdfMode={pdfMode}\n                />\n              </View>\n              <View className=\"w-50 p-5\" pdfMode={pdfMode}>\n                <Text className=\"right bold dark\" pdfMode={pdfMode}>\n                  {subTotal?.toFixed(2)}\n                </Text>\n              </View>\n            </View>\n\n            {/* <View className=\"flex\" pdfMode={pdfMode}>\n              <View className=\"w-50 p-5\" pdfMode={pdfMode}>\n                <EditableInput\n                  value={invoice.taxLabel}\n                  onChange={(value) => handleChange(\"taxLabel\", value)}\n                  pdfMode={pdfMode}\n                />\n              </View>\n              <View className=\"w-50 p-5\" pdfMode={pdfMode}>\n                <Text className=\"right bold dark\" pdfMode={pdfMode}>\n                  {saleTax?.toFixed(2)}\n                </Text>\n              </View>\n            </View> */}\n\n            <View className=\"flex\" pdfMode={pdfMode}>\n              <View className=\"w-50 p-5\" pdfMode={pdfMode}>\n                <EditableInput\n                  value={invoice.deliveryChargeLabel}\n                  onChange={(value) =>\n                    handleChange(\"deliveryChargeLabel\", value)\n                  }\n                  pdfMode={pdfMode}\n                />\n              </View>\n              <View className=\"w-50 p-5\" pdfMode={pdfMode}>\n                {/* <Text className=\"right bold dark\" pdfMode={pdfMode}>\n                  {deliveryCharge?.toFixed(2)}\n                </Text> */}\n                <EditableInput\n                  className=\"right bold dark\"\n                  // value={paidTotal && parseFloat(paidTotal)?.toFixed(2)}\n                  value={deliveryCharge}\n                  onChange={(value) => setDeliveryCharge(value)}\n                  pdfMode={pdfMode}\n                />\n              </View>\n            </View>\n\n            <View className=\"flex\" pdfMode={pdfMode}>\n              <View className=\"w-50 p-5\" pdfMode={pdfMode}>\n                <EditableInput\n                  value={invoice.paidLabel}\n                  onChange={(value) => handleChange(\"paidLabel\", value)}\n                  pdfMode={pdfMode}\n                />\n              </View>\n              <View className=\"w-50 p-5\" pdfMode={pdfMode}>\n                {/* <Text className=\"right bold dark\" pdfMode={pdfMode}>\n                  {paidTotal?.toFixed(2)}\n                </Text> */}\n                <EditableInput\n                  className=\"right bold dark\"\n                  // value={paidTotal && parseFloat(paidTotal)?.toFixed(2)}\n                  value={paidTotal}\n                  onChange={(value) => setPaidTotal(value)}\n                  pdfMode={pdfMode}\n                />\n              </View>\n            </View>\n            <View className=\"flex bg-gray p-5\" pdfMode={pdfMode}>\n              <View className=\"w-50 p-5\" pdfMode={pdfMode}>\n                <EditableInput\n                  className=\"bold\"\n                  value={invoice.totalLabel}\n                  onChange={(value) => handleChange(\"totalLabel\", value)}\n                  pdfMode={pdfMode}\n                />\n              </View>\n              <View className=\"w-50 p-5 flex\" pdfMode={pdfMode}>\n                <EditableInput\n                  className=\"dark bold right ml-30\"\n                  value={invoice.currency}\n                  onChange={(value) => handleChange(\"currency\", value)}\n                  pdfMode={pdfMode}\n                />\n                <Text className=\"right bold dark w-auto\" pdfMode={pdfMode}>\n                  {(typeof subTotal !== \"undefined\" &&\n                  typeof deliveryCharge !== \"undefined\" &&\n                  typeof paidTotal !== \"undefined\"\n                    ? subTotal +\n                      parseFloat(deliveryCharge) -\n                      parseFloat(paidTotal)\n                    : 0\n                  ).toFixed(2)}\n                </Text>\n              </View>\n            </View>\n          </View>\n        </View>\n\n        {/* signature start */}\n        <View className=\"flex end mt-60\" pdfMode={pdfMode}>\n          <View className=\"w-40 p-4-8 pb-10\" pdfMode={pdfMode}>\n            <hr className=\"space-remove\" />\n            <Text\n              className=\"fs-20 bold dark right space-remove w-93\"\n              pdfMode={pdfMode}\n            >\n              Authorizer Signature\n            </Text>\n          </View>\n        </View>\n        {/* signature end */}\n\n        <View className=\"mt-20\" pdfMode={pdfMode}>\n          <EditableInput\n            className=\"bold w-100\"\n            value={invoice.notesLabel}\n            onChange={(value) => handleChange(\"notesLabel\", value)}\n            pdfMode={pdfMode}\n          />\n          {notes?.map((note, i) => (\n            <div key={i} className=\"flex\">\n              <span style={{ paddingRight: \"1rem\" }}>\n                {(indexOfNote = (1 + i).toString() + \".\")}\n              </span>\n              <Text className=\"dark space-remove\" pdfMode={pdfMode}>\n                {note}\n              </Text>\n            </div>\n          ))}\n        </View>\n        {/* <View className=\"mt-20\" pdfMode={pdfMode}>\n          <EditableInput\n            className=\"bold w-100\"\n            value={invoice.termLabel}\n            onChange={(value) => handleChange(\"termLabel\", value)}\n            pdfMode={pdfMode}\n          />\n          <EditableTextarea\n            className=\"w-100\"\n            rows={2}\n            value={invoice.term}\n            onChange={(value) => handleChange(\"term\", value)}\n            pdfMode={pdfMode}\n          />\n        </View> */}\n      </Page>\n    </Document>\n  );\n};\n\nexport default InvoicePage;\n","import React from 'react'\nimport InvoicePage from './components/InvoicePage'\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      {/* <h1 className=\"center fs-30\">Invoice</h1> */}\n      <InvoicePage />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './scss/main.scss'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}